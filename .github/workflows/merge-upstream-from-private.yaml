name: Auto-merge PRs from private fork into public repo

# Trigger on new issue comments
on:
  issue_comment:
    types: [created]

jobs:
  merge_pr:
    # Run only if:
    # - The comment is on a PR (not a regular issue)
    # - The comment text is exactly 'merge', 'Merge', or 'MERGE'
    # - The comment author is the pre-defined maintainer
    if: >
      github.event.issue.pull_request != null &&
      (github.event.comment.body == 'merge' || github.event.comment.body == 'MERGE' || github.event.comment.body == 'Merge') &&
      github.event.comment.user.login == 'arianabuilds'
    runs-on: ubuntu-latest
    steps:
      - name: Debug Variables
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "PR number: ${{ github.event.issue.number }}"
          echo "Comment Body: ${{ github.event.comment.body }}"
          echo "Comment User Login: ${{ github.event.comment.user.login }}"
          # Check that our tokens are set (masked output)
          if [ -z "${{ secrets.UPSTREAM_REPO_TOKEN }}" ]; then echo "UPSTREAM_REPO_TOKEN is NOT set"; else echo "UPSTREAM_REPO_TOKEN is set"; fi
          if [ -z "${{ secrets.PRIVATE_REPO_TOKEN }}" ]; then echo "PRIVATE_REPO_TOKEN is NOT set"; else echo "PRIVATE_REPO_TOKEN is set"; fi

      - name: 1. Checkout Public Upstream Repository
        uses: actions/checkout@v3
        with:
          repository: arianabuilds/blowjobchain-web
          ref: main
          token: ${{ secrets.UPSTREAM_REPO_TOKEN }}
          path: upstream
          fetch-depth: 0 # Fetch full history to allow merging

      # 2. Check out the private forkâ€™s PR branch.
      #    The PR branch name can be derived from github.event.pull_request.head.ref
      #    but for issue_comment events, you often need to fetch the PR details first.
      #    For simplicity, suppose you already know the PR branch or pass it in some way.
      - name: 2. Checkout Private Fork PR branch
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: test-automerge
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          path: pato

      - name: 3. Merge PR branch into upstream/main
        run: |
          cd upstream
          git config user.name "ariana-via-gh-action"
          git config user.email "arianabuilds[bot]@users.noreply.github.com"

          # Add the private clone as a remote (pointing to the local folder).
          # We can reference the path to the local clone, so no network fetch is needed.
          git remote add pato ../pato

          # The HEAD of ../pato is the PR branch we checked out.
          git fetch pato

          # We're already on 'main' in the upstream folder, so just merge.
          git merge private/HEAD -m "Merge PR pato/#${{ github.event.issue.number }}"

      # 4. Push the updated main branch back to the public repo
      - name: Push updated main
        run: |
          cd upstream
          git push origin main
